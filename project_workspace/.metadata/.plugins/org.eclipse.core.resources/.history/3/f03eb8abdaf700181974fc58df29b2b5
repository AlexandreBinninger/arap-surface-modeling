import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;

import Jcg.geometry.*;
import Jcg.polyhedron.*;
import Utils.Rotation_3;
import matrixPkg.Matrix;
import Utils.Pair;

public class Computations {

	double getOppositeAngle(Halfedge<Point_3> h) {
		Vertex<Point_3> va = h.getVertex();
		h = h.getNext();
		Vertex<Point_3> vb = h.getVertex();
		h = h.getNext();
		Vertex<Point_3> vc = h.getVertex();
		Point_3 a = va.getPoint();
		Point_3 b = vb.getPoint();
		Point_3 c = vc.getPoint();
		Vector_3 e1 = new Vector_3(b, a);
		Vector_3 e2 = new Vector_3(b, c);
		return (Double) e1.innerProduct(e2);
	}

	double getWeight(Halfedge<Point_3> h) {
		// TODO : if boundary edge, opposite halfedge exists but face is null, fix the
		// method if needed
		double alpha = getOppositeAngle(h);
		h = h.getOpposite();
		double beta = getOppositeAngle(h);
		return (0.5 * (1 / Math.atan(alpha)) * (1 / Math.atan(beta)));
	}

	static ArrayList<Halfedge<Point_3>> getNeighbors(Halfedge<Point_3> h) {
		Halfedge<Point_3> e = h.getNext();
		Halfedge<Point_3> o = h.getOpposite();
		ArrayList<Halfedge<Point_3>> neighbors = new ArrayList<Halfedge<Point_3>>();
		while (e != o) {
			neighbors.add(e);
			e = e.getOpposite().getNext();
		}
		neighbors.add(o);
		return (neighbors);
	}
	
//	static ArrayList<Vertex<Point_3>> getNeighbors(Vertex<Point_3> v){
//		Halfedge<Point_3> h = v.getHalfedge();
//		Halfedge<Point_3> e = h.getNext();
//		Halfedge<Point_3> o = h.getOpposite();
//		ArrayList<Vertex<Point_3>> neighbors = new ArrayList<Vertex<Point_3>>();
//		while (e != o) {
//			neighbors.add(e.getVertex());
//			e = e.getOpposite().getNext();
//		}
//		neighbors.add(o.getVertex());
//		return (neighbors);
//	}

	HashMap<Halfedge<Point_3>, Double> getWeightsArray(Halfedge<Point_3> h, ArrayList<Halfedge<Point_3>> neighbors) {
		HashMap<Halfedge<Point_3>, Double> weights = new HashMap<Halfedge<Point_3>, Double>();
		Iterator<Halfedge<Point_3>> iter = neighbors.iterator();
		while (iter.hasNext()) {
			Halfedge<Point_3> e = iter.next();
			weights.put(e, (Double)getWeight(e));
		}
		return weights;
	}
	
//	HashMap<Vertex<Point_3>, Double> getWeightsArray(Vertex v, ArrayList<Vertex<Point_3>> neighbors){
//		HashMap<Vertex<Point_3>, Double> weights = new HashMap<Vertex<Point_3>, Double>();
//		for (Vertex<Point_3> n : neighbors){
//			
//			weights.put(v, )
//		}
//	}
	
	Matrix getCovarianceMatrix(Matrix M, Halfedge<Point_3> h, Halfedge<Point_3> hPrime) {
		ArrayList<Halfedge<Point_3>> neighbors = getNeighbors(h);
		ArrayList<Halfedge<Point_3>> neighborsPrime = getNeighbors(hPrime); // hopefully the order is the same
		int n = neighbors.size();
		Matrix S = M.getMatrix(new double[n][n]);
		HashMap<Halfedge<Point_3>, Double> weights = getWeightsArray(h, neighbors);
		Vertex<Point_3> hVertex = h.getVertex();
		Point_3 i = hVertex.getPoint();
		Vertex<Point_3> hVertexPrime = hPrime.getVertex();
		Point_3 iPrime = hVertexPrime.getPoint();
		for (int k = 0; k < n; k++) {
			Halfedge<Point_3> e = neighbors.get(k);
			Halfedge<Point_3> ePrime = neighborsPrime.get(k);
			Vertex<Point_3> eVertex = e.getVertex();
			Point_3 j = eVertex.getPoint();
			Vertex<Point_3> eVertexPrime = ePrime.getVertex();
			Point_3 jPrime = eVertexPrime.getPoint();
			Vector_3 eij = new Vector_3(i, j);
			Vector_3 eijPrime = new Vector_3(iPrime, jPrime);
			double[][] eij_column = {{(double) eij.getX()}, {(double) eij.getY()}, {(double) eij.getZ()}};
			double[][] eijPrime_row = {{(double) eijPrime.getX(), (double) eijPrime.getY(), (double) eijPrime.getZ()}};
			Matrix eij_column_M = M.getMatrix(eij_column);
			Matrix eijPrime_row_M = M.getMatrix(eijPrime_row);
			S = S.plus(eij_column_M.times(eijPrime_row_M).times(weights.get(e)));
		}
		return S;
	}
	
//	Matrix getWeightsMatrix(Matrix M, Halfedge<Point_3> h) {
//		ArrayList<Double> weights = new ArrayList<Double>();
//		ArrayList<Halfedge<Point_3>> neighbors = getNeighbors(h);
//		Iterator<Halfedge<Point_3>> iter = neighbors.iterator();
//		while(iter.hasNext()) {
//			Halfedge<Point_3> e = iter.next();
//			weights.add(getWeight(e));
//		}
//		double[][] weights_array = new double[weights.size()][weights.size()];
//		for (int i = 0; i < weights_array.length; i++) {
//			weights_array[i][i] = weights.get(i);
//		}
//		return M.getMatrix(weights_array);
//	}
	
	Rotation_3 getHalfedgeRotation(Matrix S, Halfedge<Point_3> h) {
		Pair<Matrix, Matrix> UV = S.getSVD();
		Rotation_3 R = new Rotation_3(UV.getSecond().times(UV.getFirst().getTranspose()));
		return R;
	}

}
